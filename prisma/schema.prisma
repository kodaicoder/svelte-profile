// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Skill {
  id       Int        @id @default(autoincrement())
  userId   Int
  user     User       @relation(fields: [userId], references: [id])
  name     String     @db.VarChar(255)
  level    Float
  link     String?
  image     SkillImage?
  isActive Boolean    @default(true)
}

model SkillImage {
  id       Int     @id @default(autoincrement())
  url      String
  isActive Boolean @default(true)
  skillId Int @unique
  skill    Skill  @relation(fields: [skillId], references: [id],onDelete: Cascade)
}

model Article {
  id      Int            @id @default(autoincrement())
  userId  Int
  user    User           @relation(fields: [userId], references: [id])
  title   String         @db.VarChar(255)
  content String
  image  ArticleImage?
  link    String
}

model ArticleImage {
  id        Int     @id @default(autoincrement())
  url       String
  articleId Int @unique
  article   Article @relation(fields: [articleId], references: [id],onDelete: Cascade)
  isActive  Boolean @default(true)
}

model Project {
  id         Int            @id @default(autoincrement())
  userId     Int
  user       User           @relation(fields: [userId], references: [id])
  title      String         @db.VarChar(255)
  content    String
  image     ProjectImage?
  sourceLink String
  link       String?
}

model ProjectImage {
  id        Int     @id @default(autoincrement())
  url       String
  projectId Int @unique
  project   Project @relation(fields: [projectId], references: [id],onDelete: Cascade)
  isActive  Boolean @default(true)
}

model User {
  id        Int         @id @default(autoincrement())
  email     String      @unique
  password  String
  firstName String
  lastName  String
  image     UserImage?
  sessions  Session[]
  role      String      @default("USER")
  projects Project[]
  articles Article[]
  skills   Skill[]
  socialLinks   SocialLink[]
  resume  Resume?
  motto   Motto[]
}

model Resume {
  id      Int     @id @default(autoincrement())
  userId  Int @unique
  user    User    @relation(fields: [userId], references: [id])
  url String
  isActive Boolean @default(true)
}


model UserImage {
  id       Int     @id @default(autoincrement())
  userId  Int @unique
  user    User    @relation(fields: [userId], references: [id],onDelete: Cascade)
  url      String
  isActive Boolean @default(true)
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Motto {
  id      Int     @id @default(autoincrement())
  userId  Int    
  user    User    @relation(fields: [userId], references: [id])
  content String  @db.VarChar(1000)
  author  String? @db.VarChar(250)
}

model SocialLink {
  id     Int      @id @default(autoincrement())
  userId Int
  user   User     @relation(fields: [userId], references: [id])
  image SocialLinkImage?
  link   String
  isActive Boolean @default(true)
}

model SocialLinkImage {
  id       Int     @id @default(autoincrement())
  url      String
  isActive Boolean @default(true)
  socialLinkId   Int     @unique
  socialLink     SocialLink @relation(fields: [socialLinkId], references: [id],onDelete: Cascade)
}

